作者：廖雪峰
地址：https://www.liaoxuefeng.com/wiki/896043488029600

【.*】

@安装版本库
【cd learngit】
初始化一个Git仓库，使用【git init】命令。
添加文件到Git仓库，分两步：
使用命令【git add <file>】，注意，可反复多次使用，添加多个文件；
使用命令【git commit -m <message>】，完成




@时光穿梭机
要随时掌握工作区的状态，使用【git status】命令。
如果git status告诉你有文件被修改过，用【git diff】可以查看修改内容。

@@@@时光穿梭机(工作区版本回退):
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令【git reset --hard commit_id】。
穿梭前，用【git log】可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用【git reflog】查看命令历史，以便确定要回到未来的哪个版本。

@@@@时光穿梭机(工作区和暂存区):
1. 写代码的地方 为工作区。
2. 写代码的地方/.git 目录为版本库
版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
3. 需要提交的文件修改“git add xxx”通放到暂存区，然后，一次性提交暂存区的所有修改提交到当前分支

@@@@时光穿梭机(管理修改):
每次修改，如果不用git add到暂存区，那就不会加入到commit中。

@@@@时光穿梭机(撤销修改):
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令
【git checkout -- file】。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区"add xxx"时，想丢弃修改，分两步，第一步用命令【git reset HEAD <file>】，就回到了场景1，第二步按场景1操作。
场景3：已经提交了"commit"不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

@@@@时光穿梭机(管理修改):
命令【git rm】用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
【git rm -r *】可以删除所有文件





@远程仓库
请自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：
第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com"
你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。
如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
github-addkey-1
点“Add Key”，你就应该看到已经添加的Key：
github-addkey-2
为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
当然，GitHub允许你添加多个Key。

@@@@远程仓库(添加远程库)
现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。
首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：
在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：
目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：
【git remote add origin git@github.com:michaelliao/learngit.git】
请千万注意，把上面的michaelliao替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。
添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
下一步，就可以把本地库的所有内容推送到远程库上：
【git push -u origin master】
Counting objects: 20, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.
Total 20 (delta 5), reused 0 (delta 0)
remote: Resolving deltas: 100% (5/5), done.
To github.com:michaelliao/learngit.git
 * [new branch]      master -> master
Branch 'master' set up to track remote branch 'master' from 'origin'.
把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。

如果你在创建库的时候添加了README.md则需要先合并分支
【git pull --rebase origin master】


由于远程库是空的，我们第一次推送master分支时，加上了【-u】-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

从现在起，只要本地作了提交，就可以通过命令：
【git push origin master】
把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！



@@@@从远程库克隆
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但ssh协议速度最快。





错误集合：

第一次
git push -u origin master
的时候出现
{
    ! [rejected]        master -> master (fetch first)
    error: failed to push some refs to 'git@github.com:peTzxz/Property-management-system'
    hint: Updates were rejected because the remote contains work that you do
    hint: not have locally. This is usually caused by another repository pushing
    hint: to the same ref. You may want to first integrate the remote changes
    hint: (e.g., 'git pull ...') before pushing again.
    hint: See the 'Note about fast-forwards' in 'git push --help' for details.
    出现这个问题是因为github中的README.md文件不在本地代码目录中，可以通过如下命令进行代码合并
    【git pull --rebase origin master】
}




新版git已经更改命令
从暂存区恢复工作区 【git restore --worktree readme.txt】
从master恢复暂存区 【git restore --staged readme.txt】
从master同时恢复工作区和暂存区 【git restore --source=HEAD --staged --worktree readme.txt】



Your local changes to the following files would be overwritten by merge
error: Your local changes to the following files would be overwritten by merge:
{
如果希望保留生产服务器上所做的改动,仅仅并入新配置项, 处理方法如下:
git stash
git pull
git stash pop
然后可以使用git diff -w +文件名 来确认代码自动合并的情况.

反过来,如果希望用代码库中的文件完全覆盖本地工作版本. 方法如下:
git reset --hard
git pull
其中git reset是针对版本,如果想针对文件回退本地修改

【git stash】: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。
【git stash pop】: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。
【git stash list】: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。
【git stash clear】: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。
}